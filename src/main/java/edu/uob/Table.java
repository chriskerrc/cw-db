package edu.uob;
import java.io.*;
import java.util.ArrayList;

public class Table {

    String fileName = "people.tab"; //change this from hard coded to a parameter
    String filePath = "databases" + File.separator + fileName;

    public Table(){
        ArrayList<ArrayList<String>> table = new ArrayList<>();
    }

    /*
    use storageFolderPath from constructor method of DBServer class, instead of hardcoding to databases
    does this mean I need to create a new DBServer in the Table class?

    The first (0th) column in each table must contain a unique numerical identifier or 'primary key' (which should always be called id).
    The id value of each row will NOT be provided by the user, but rather they should be automatically generated by the server.
    It is up to you how you do this, however you should ensure that each id is unique (within the table where is resides).

    For example, the user provides a Create command:
    CREATE TABLE marks (name, mark, pass);
    Then the user inserts data:
    INSERT INTO marks VALUES ('Simon', 65, TRUE);
    Need to generate unique IDs for this row/record. It is not provided by the user

    database and table names should be case-insensitive (I think the parser already does this?)

    read table into data structure: arraylist of arraylists...

    create file writing method
    in writing method, ensure that name of table is lowercase

    create method to add ID for each row (unique per table)

    column names are case-insensitive for querying, but are preserved as written by user when writing out to file

    Note that if you encounter a tab file with invalid formatting when reading in data from the filesystem, your file
    parsing method should throw an IOException. You should however ensure that this exception is subsequently caught
    by another part of your server - remember: don't let your server crash !

     */


    public boolean doesFileExist() {
        File fileToOpen = new File(filePath);
        return fileToOpen.exists();
    }

    public void readFileToConsole() throws IOException {
        File fileToOpen = new File(filePath);
        FileReader reader = new FileReader(fileToOpen);
        BufferedReader buffReader = new BufferedReader(reader);
        String line;
        while ((line = buffReader.readLine()) != null) {
            System.out.println(line);
        }
        buffReader.close();
    }


    public void storeFileToDataStructure() throws IOException{
        //check file exists
        File fileToOpen = new File(filePath);
        FileReader reader = new FileReader(fileToOpen);
        BufferedReader buffReader = new BufferedReader(reader);
        ArrayList<ArrayList<String>> table = new ArrayList<>();
        String line;
        while ((line = buffReader.readLine()) != null && !line.isEmpty()) {
            String [] rowArray = line.split("\\t"); //split on tab
            ArrayList<String> row = fileLineToRow(rowArray);
            table.add(row);
        }
        System.out.println(table);
    }

    public ArrayList<String> fileLineToRow(String [] rowArray) {
        ArrayList<String> row = new ArrayList<>();
        int rowLength = rowArray.length;
        int i = 0;
        while(i < rowLength){
            row.add(rowArray[i]);
            i++;
        }
        return row;
    }


    //writeTableToFile
}
